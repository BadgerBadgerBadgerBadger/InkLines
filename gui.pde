/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void panel1_Click1(GPanel source, GEvent event) { //_CODE_:InkerPanel:263688:
  
} //_CODE_:InkerPanel:263688:

public void nOIEntered(GTextField source, GEvent event) { //_CODE_:nOI:368429:
  if (!isNumeric(nOI.getText())) {
    errorMessages.setText("Entered value is non-numeric!");
    errorMessages.setTextBold();
  }
} //_CODE_:nOI:368429:

public void leastForceSlided(GSlider source, GEvent event) { //_CODE_:leastForceSlider:270249:
  mostForceSlider.setLimits(leastForceSlider.getValueF(), MOST_FORCE);
  leastForceLabel.setText(lowerForceLimit + " " + to2(leastForceSlider.getValueF()));
  mostForceLabel.setText(upperForceLimit + " " + to2(mostForceSlider.getValueF()));
} //_CODE_:leastForceSlider:270249:

public void mostForceSlided(GSlider source, GEvent event) { //_CODE_:mostForceSlider:507822:
  mostForceLabel.setText(upperForceLimit + " " + to2(mostForceSlider.getValueF()));
} //_CODE_:mostForceSlider:507822:

public void leastSpeedSlided(GSlider source, GEvent event) { //_CODE_:leastSpeedSlider:406597:
  mostSpeedSlider.setLimits(leastSpeedSlider.getValueF(), MOST_SPEED);
  leastSpeedLabel.setText(lowerSpeedLimit + " " + to2(leastSpeedSlider.getValueF()));
  mostSpeedLabel.setText(upperSpeedLimit + " " + to2(mostSpeedSlider.getValueF()));
} //_CODE_:leastSpeedSlider:406597:

public void mostSpeedSlided(GSlider source, GEvent event) { //_CODE_:mostSpeedSlider:965032:
  mostSpeedLabel.setText(upperSpeedLimit + " " + to2(mostSpeedSlider.getValueF()));
} //_CODE_:mostSpeedSlider:965032:

public void leastMassSlided(GSlider source, GEvent event) { //_CODE_:leastMassSlider:364920:
  mostMassSlider.setLimits(leastMassSlider.getValueF(), MOST_MASS);
  leastMassLabel.setText(lowerMassLimit + " " + to2(leastMassSlider.getValueF()));
  mostMassLabel.setText(upperMassLimit + " " + to2(mostMassSlider.getValueF()));
} //_CODE_:leastMassSlider:364920:

public void mostMassSlided(GSlider source, GEvent event) { //_CODE_:mostMassSlider:847586:
  mostMassLabel.setText(upperMassLimit + " " + to2(mostMassSlider.getValueF()));
} //_CODE_:mostMassSlider:847586:

public void emitButtonClicked(GButton source, GEvent event) { //_CODE_:emitButton:458168:
  if (!isNumeric(nOI.getText())) {
    errorMessages.setText("Entered value is non-numeric!");
    errorMessages.setTextBold();
    nOI.setText("");
  }
  else {
    InkerPanel.setCollapsed(true);
    PaperPanel.setCollapsed(true);
    createEmitter();
    setDrawSurface();
    run = true;
  }
} //_CODE_:emitButton:458168:

public void panel1_Click2(GPanel source, GEvent event) { //_CODE_:PaperPanel:255791:
  
} //_CODE_:PaperPanel:255791:

public void pOneRedRot(GKnob source, GEvent event) { //_CODE_:pOneRed:481534:
  
} //_CODE_:pOneRed:481534:

public void pOneBlueRot(GKnob source, GEvent event) { //_CODE_:pOneBlue:261704:
  
} //_CODE_:pOneBlue:261704:

public void pOneGreenRot(GKnob source, GEvent event) { //_CODE_:pOneGreen:365858:
  
} //_CODE_:pOneGreen:365858:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  if(frame != null)
    frame.setTitle("Inkers");
  InkerPanel = new GPanel(this, 500, 0, 200, 500, "Inker Controls");
  InkerPanel.setDraggable(false);
  InkerPanel.setText("Inker Controls");
  InkerPanel.setTextBold();
  InkerPanel.setTextItalic();
  InkerPanel.setOpaque(true);
  InkerPanel.addEventHandler(this, "panel1_Click1");
  label1 = new GLabel(this, 10, 25, 90, 25);
  label1.setText("Number of Inkers:");
  label1.setOpaque(false);
  nOI = new GTextField(this, 100, 25, 90, 25, G4P.SCROLLBARS_NONE);
  nOI.setOpaque(true);
  nOI.addEventHandler(this, "nOIEntered");
  leastForceSlider = new GSlider(this, 10, 90, 180, 10, 10.0);
  leastForceSlider.setLimits(0.7, 0.3, 3.0);
  leastForceSlider.setNumberFormat(G4P.DECIMAL, 2);
  leastForceSlider.setOpaque(false);
  leastForceSlider.addEventHandler(this, "leastForceSlided");
  mostForceSlider = new GSlider(this, 10, 140, 180, 10, 10.0);
  mostForceSlider.setLimits(1.3, 0.7, 3.0);
  mostForceSlider.setNumberFormat(G4P.DECIMAL, 2);
  mostForceSlider.setOpaque(false);
  mostForceSlider.addEventHandler(this, "mostForceSlided");
  leastForceLabel = new GLabel(this, 10, 65, 180, 20);
  leastForceLabel.setText("Lower Force Limit:");
  leastForceLabel.setOpaque(false);
  mostForceLabel = new GLabel(this, 10, 115, 180, 20);
  mostForceLabel.setText("Upper Force Limit:");
  mostForceLabel.setOpaque(false);
  leastSpeedLabel = new GLabel(this, 10, 165, 180, 20);
  leastSpeedLabel.setText("Lower Speed Limit:");
  leastSpeedLabel.setOpaque(false);
  leastSpeedSlider = new GSlider(this, 10, 190, 180, 10, 10.0);
  leastSpeedSlider.setLimits(1.0, 1.0, 19.0);
  leastSpeedSlider.setNumberFormat(G4P.DECIMAL, 2);
  leastSpeedSlider.setOpaque(false);
  leastSpeedSlider.addEventHandler(this, "leastSpeedSlided");
  mostSpeedLabel = new GLabel(this, 10, 215, 180, 20);
  mostSpeedLabel.setText("Upper Speed Limit:");
  mostSpeedLabel.setOpaque(false);
  mostSpeedSlider = new GSlider(this, 10, 240, 180, 10, 10.0);
  mostSpeedSlider.setLimits(13, 7, 19);
  mostSpeedSlider.setNumberFormat(G4P.INTEGER, 0);
  mostSpeedSlider.setOpaque(false);
  mostSpeedSlider.addEventHandler(this, "mostSpeedSlided");
  leastMassLabel = new GLabel(this, 10, 265, 180, 20);
  leastMassLabel.setText("Lower Mass Limit:");
  leastMassLabel.setOpaque(false);
  leastMassSlider = new GSlider(this, 10, 290, 180, 10, 10.0);
  leastMassSlider.setLimits(0.5, 0.0, 1.0);
  leastMassSlider.setNumberFormat(G4P.DECIMAL, 2);
  leastMassSlider.setOpaque(false);
  leastMassSlider.addEventHandler(this, "leastMassSlided");
  mostMassLabel = new GLabel(this, 10, 315, 180, 20);
  mostMassLabel.setText("Upper Mass Limit:");
  mostMassLabel.setOpaque(false);
  mostMassSlider = new GSlider(this, 10, 345, 180, 10, 10.0);
  mostMassSlider.setLimits(0.5, 0.0, 1.0);
  mostMassSlider.setNumberFormat(G4P.DECIMAL, 2);
  mostMassSlider.setOpaque(false);
  mostMassSlider.addEventHandler(this, "mostMassSlided");
  errorMessages = new GLabel(this, 5, 466, 190, 30);
  errorMessages.setOpaque(false);
  emitButton = new GButton(this, 60, 380, 80, 30);
  emitButton.setText("Start");
  emitButton.setTextBold();
  emitButton.addEventHandler(this, "emitButtonClicked");
  InkerPanel.addControl(label1);
  InkerPanel.addControl(nOI);
  InkerPanel.addControl(leastForceSlider);
  InkerPanel.addControl(mostForceSlider);
  InkerPanel.addControl(leastForceLabel);
  InkerPanel.addControl(mostForceLabel);
  InkerPanel.addControl(leastSpeedLabel);
  InkerPanel.addControl(leastSpeedSlider);
  InkerPanel.addControl(mostSpeedLabel);
  InkerPanel.addControl(mostSpeedSlider);
  InkerPanel.addControl(leastMassLabel);
  InkerPanel.addControl(leastMassSlider);
  InkerPanel.addControl(mostMassLabel);
  InkerPanel.addControl(mostMassSlider);
  InkerPanel.addControl(errorMessages);
  InkerPanel.addControl(emitButton);
  PaperPanel = new GPanel(this, 299, 0, 200, 500, "Paper Controls");
  PaperPanel.setDraggable(false);
  PaperPanel.setText("Paper Controls");
  PaperPanel.setTextBold();
  PaperPanel.setTextItalic();
  PaperPanel.setOpaque(true);
  PaperPanel.addEventHandler(this, "panel1_Click2");
  label2 = new GLabel(this, 0, 20, 200, 20);
  label2.setText("Paper 1:");
  label2.setTextItalic();
  label2.setOpaque(false);
  pOneRed = new GKnob(this, 10, 50, 60, 50, 0.8);
  pOneRed.setTurnRange(110, 70);
  pOneRed.setTurnMode(GKnob.CTRL_ANGULAR);
  pOneRed.setShowArcOnly(false);
  pOneRed.setOverArcOnly(false);
  pOneRed.setIncludeOverBezel(false);
  pOneRed.setShowTrack(true);
  pOneRed.setLimits(0.5, 0.0, 1.0);
  pOneRed.setShowTicks(true);
  pOneRed.setOpaque(false);
  pOneRed.addEventHandler(this, "pOneRedRot");
  pOneBlue = new GKnob(this, 130, 50, 60, 50, 0.8);
  pOneBlue.setTurnRange(110, 70);
  pOneBlue.setTurnMode(GKnob.CTRL_ANGULAR);
  pOneBlue.setShowArcOnly(false);
  pOneBlue.setOverArcOnly(false);
  pOneBlue.setIncludeOverBezel(false);
  pOneBlue.setShowTrack(true);
  pOneBlue.setLimits(0.5, 0.0, 1.0);
  pOneBlue.setShowTicks(true);
  pOneBlue.setOpaque(false);
  pOneBlue.addEventHandler(this, "pOneBlueRot");
  pOneGreen = new GKnob(this, 70, 50, 60, 50, 0.8);
  pOneGreen.setTurnRange(110, 70);
  pOneGreen.setTurnMode(GKnob.CTRL_ANGULAR);
  pOneGreen.setShowArcOnly(false);
  pOneGreen.setOverArcOnly(false);
  pOneGreen.setIncludeOverBezel(false);
  pOneGreen.setShowTrack(true);
  pOneGreen.setLimits(0.5, 0.0, 1.0);
  pOneGreen.setShowTicks(true);
  pOneGreen.setOpaque(false);
  pOneGreen.addEventHandler(this, "pOneGreenRot");
  sketchPad1 = new GSketchPad(this, 50, 110, 100, 20);
  sketchPad1.setOpaque(false);
  PaperPanel.addControl(label2);
  PaperPanel.addControl(pOneRed);
  PaperPanel.addControl(pOneBlue);
  PaperPanel.addControl(pOneGreen);
  PaperPanel.addControl(sketchPad1);
  dets = new GLabel(this, 0, 0, 100, 30);
  dets.setOpaque(true);
}

// Variable declarations 
// autogenerated do not edit
GPanel InkerPanel; 
GLabel label1; 
GTextField nOI; 
GSlider leastForceSlider; 
GSlider mostForceSlider; 
GLabel leastForceLabel; 
GLabel mostForceLabel; 
GLabel leastSpeedLabel; 
GSlider leastSpeedSlider; 
GLabel mostSpeedLabel; 
GSlider mostSpeedSlider; 
GLabel leastMassLabel; 
GSlider leastMassSlider; 
GLabel mostMassLabel; 
GSlider mostMassSlider; 
GLabel errorMessages; 
GButton emitButton; 
GPanel PaperPanel; 
GLabel label2; 
GKnob pOneRed; 
GKnob pOneBlue; 
GKnob pOneGreen; 
GSketchPad sketchPad1; 
GLabel dets;